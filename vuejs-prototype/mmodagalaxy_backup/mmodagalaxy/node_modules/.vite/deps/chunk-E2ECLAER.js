import {
  SingleLineGL
} from "./chunk-BOJUO2RS.js";
import {
  Float32Buffer,
  Uint8Buffer
} from "./chunk-FHOMUG4O.js";
import {
  __publicField
} from "./chunk-EWTE5DHJ.js";

// node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/webgl/line_gl.js
var LineGL = class extends SingleLineGL {
  constructor(regl_wrapper, glyph) {
    super(regl_wrapper, glyph);
    __publicField(this, "glyph");
    this.glyph = glyph;
  }
  draw(indices, main_glyph, transform) {
    this._draw_impl(indices, transform, main_glyph.glglyph);
  }
  _get_show_buffer(indices, main_gl_glyph) {
    const main_show = main_gl_glyph._show;
    let show = main_show;
    if (indices.length != main_show.length - 1) {
      const nonselection = this.glyph.parent.nonselection_glyph == this.glyph;
      const n = main_show.length;
      const main_show_array = main_show.get_sized_array(n);
      if (this._show == null) {
        this._show = new Uint8Buffer(this.regl_wrapper);
      }
      const show_array = this._show.get_sized_array(n);
      show_array.fill(0);
      let iprev = indices[0];
      if (nonselection && iprev > 0) {
        show_array[iprev] = main_show_array[iprev];
      }
      for (let k = 1; k < indices.length; k++) {
        const i = indices[k];
        if (i == iprev + 1) {
          show_array[i] = main_show_array[i];
        } else if (nonselection) {
          show_array[iprev + 1] = main_show_array[iprev + 1];
          show_array[i] = main_show_array[i];
        }
        iprev = i;
      }
      if (nonselection && iprev != n - 2) {
        show_array[iprev + 1] = main_show_array[iprev + 1];
      }
      this._show.update();
      show = this._show;
    }
    return show;
  }
  _get_visuals() {
    return this.glyph.visuals.line;
  }
  _set_data_points() {
    const sx = this.glyph.sx;
    const sy = this.glyph.sy;
    const npoints = sx.length;
    if (this._points == null) {
      this._points = new Float32Buffer(this.regl_wrapper);
    }
    const points_array = this._points.get_sized_array((npoints + 2) * 2);
    this._set_points_single(points_array, sx, sy);
    this._points.update();
    return points_array;
  }
};
__publicField(LineGL, "__name__", "LineGL");

export {
  LineGL
};
//# sourceMappingURL=chunk-E2ECLAER.js.map
