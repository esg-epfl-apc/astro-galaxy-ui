{
  "version": 3,
  "sources": ["../../@bokeh/bokehjs/build/js/lib/models/glyphs/webgl/step.js"],
  "sourcesContent": ["import { Float32Buffer } from \"./buffer\";\nimport { SingleLineGL } from \"./single_line\";\nimport { assert, unreachable } from \"../../../core/util/assert\";\nexport class StepGL extends SingleLineGL {\n    glyph;\n    static __name__ = \"StepGL\";\n    constructor(regl_wrapper, glyph) {\n        super(regl_wrapper, glyph);\n        this.glyph = glyph;\n    }\n    draw(indices, main_glyph, transform) {\n        this._draw_impl(indices, transform, main_glyph.glglyph);\n    }\n    _get_show_buffer(_indices, main_gl_glyph) {\n        // Ignoring indices temporarily.\n        return main_gl_glyph._show;\n    }\n    _get_visuals() {\n        return this.glyph.visuals.line;\n    }\n    _set_data_points() {\n        const sx = this.glyph.sx;\n        const sy = this.glyph.sy;\n        const mode = this.glyph.model.mode;\n        let npoints = sx.length;\n        const is_closed = (npoints > 2 && sx[0] == sx[npoints - 1] && sy[0] == sy[npoints - 1] &&\n            isFinite(sx[0]) && isFinite(sy[0]));\n        const nstep_points = mode == \"center\" ? 2 * npoints : 2 * npoints - 1;\n        if (this._points == null) {\n            this._points = new Float32Buffer(this.regl_wrapper);\n        }\n        const points_array = this._points.get_sized_array((nstep_points + 2) * 2);\n        // WebGL renderer needs just one of (x, y) coordinates of inserted step points\n        // to be NaN for it to be rendered correctly.\n        let is_finite = isFinite(sx[0] + sy[0]);\n        let j = 2;\n        if (mode == \"center\") {\n            points_array[j++] = is_finite ? sx[0] : NaN;\n            points_array[j++] = sy[0];\n        }\n        for (let i = 0; i < npoints - 1; i++) {\n            const next_finite = isFinite(sx[i + 1] + sy[i + 1]);\n            switch (mode) {\n                case \"before\":\n                    points_array[j++] = is_finite ? sx[i] : NaN;\n                    points_array[j++] = sy[i];\n                    if (i < npoints - 1) {\n                        points_array[j++] = is_finite && next_finite ? sx[i] : NaN;\n                        points_array[j++] = sy[i + 1];\n                    }\n                    break;\n                case \"after\":\n                    points_array[j++] = is_finite ? sx[i] : NaN;\n                    points_array[j++] = sy[i];\n                    if (i < npoints - 1) {\n                        points_array[j++] = is_finite && next_finite ? sx[i + 1] : NaN;\n                        points_array[j++] = sy[i];\n                    }\n                    break;\n                case \"center\":\n                    if (is_finite && next_finite) {\n                        const midx = (sx[i] + sx[i + 1]) / 2;\n                        points_array[j++] = midx;\n                        points_array[j++] = sy[i];\n                        points_array[j++] = midx;\n                        points_array[j++] = sy[i + 1];\n                    }\n                    else {\n                        points_array[j++] = is_finite ? sx[i] : NaN;\n                        points_array[j++] = sy[i];\n                        points_array[j++] = next_finite ? sx[i + 1] : NaN;\n                        points_array[j++] = sy[i + 1];\n                    }\n                    break;\n                default:\n                    unreachable();\n            }\n            is_finite = next_finite;\n        }\n        points_array[j++] = is_finite ? sx[npoints - 1] : NaN;\n        points_array[j++] = is_finite ? sy[npoints - 1] : NaN;\n        assert(j == nstep_points * 2 + 2);\n        npoints = nstep_points;\n        if (is_closed) {\n            points_array[0] = points_array[2 * npoints - 2]; // Last but one point.\n            points_array[1] = points_array[2 * npoints - 1];\n            points_array[2 * npoints + 2] = points_array[4]; // Second point.\n            points_array[2 * npoints + 3] = points_array[5];\n        }\n        else {\n            // These are never used by the WebGL shaders, but setting to zero anyway.\n            points_array[0] = 0.0;\n            points_array[1] = 0.0;\n            points_array[2 * npoints + 2] = 0.0;\n            points_array[2 * npoints + 3] = 0.0;\n        }\n        this._points.update();\n        return points_array;\n    }\n}\n//# sourceMappingURL=step.js.map"],
  "mappings": "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",
  "names": []
}
