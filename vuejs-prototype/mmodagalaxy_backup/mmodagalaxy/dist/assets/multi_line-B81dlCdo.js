var x=Object.defineProperty;var m=(g,h,a)=>h in g?x(g,h,{enumerable:!0,configurable:!0,writable:!0,value:a}):g[h]=a;var y=(g,h,a)=>m(g,typeof h!="symbol"?h+"":h,a);import{B as b}from"./base_line-BQHxxMx0.js";import{F as w,U as v}from"./buffer-Duz0mlao.js";import"./index-DPsHDnTC.js";class z extends b{constructor(a,i){super(a,i);y(this,"glyph");this.glyph=i}draw(a,i,f){this.visuals_changed&&(this._set_visuals(),this.visuals_changed=!1);const e=i.glglyph,r=e.data_changed||e.data_mapped;r&&e._set_data(e.data_changed),(r&&e._is_dashed||this._is_dashed)&&e._set_length(),r&&(e.data_changed=!1,e.data_mapped=!1);const{data_size:_}=this.glyph;let t=null,o=null;_>1&&([t,o]=this.regl_wrapper.framebuffer_and_texture);let n=0,c=-1;for(const s of a){for(let p=c+1;p<s;p++){const d=i.sxs.get(p).length;n+=(d+2)*2}const l=i.sxs.get(s).length,u=l-1;if(t!=null&&this.regl_wrapper.clear_framebuffer(t),this._draw_single(e,f,s,n,u,t),t!=null){const p={scissor:this.regl_wrapper.scissor,viewport:this.regl_wrapper.viewport,framebuffer_tex:o};this.regl_wrapper.accumulate()(p)}n+=(l+2)*2,c=s}}_get_visuals(){return this.glyph.visuals.line}_set_data(a){const i=this.glyph.data_size,f=this.glyph.sxs.data.length;this._points==null&&(this._points=new w(this.regl_wrapper));const e=this._points.get_sized_array((f+2*i)*2);let r=0;for(let _=0;_<i;_++){const t=this.glyph.sxs.get(_),o=this.glyph.sys.get(_),n=t.length,c=e.subarray(r,r+(n+2)*2);this._set_points_single(c,t,o),r+=(n+2)*2}if(this._points.update(),a){this._show==null&&(this._show=new v(this.regl_wrapper));const _=this._show.get_sized_array(f+i);let t=0,o=0;for(let n=0;n<i;n++){const s=this.glyph.sxs.get(n).length,l=e.subarray(t,t+(s+2)*2),u=_.subarray(o,o+s+1);this._set_show_single(u,l),t+=(s+2)*2,o+=s+1}this._show.update()}}_set_length(){const a=this.glyph.data_size,i=this.glyph.sxs.data.length,f=this._points.get_array(),e=this._show.get_array();this._length_so_far==null&&(this._length_so_far=new w(this.regl_wrapper));const r=this._length_so_far.get_sized_array(i-a);let _=0,t=0,o=0;for(let n=0;n<a;n++){const s=this.glyph.sxs.get(n).length,l=s-1,u=f.subarray(_,_+(s+2)*2),p=e.subarray(t,t+s+1),d=r.subarray(o,o+l);this._set_length_single(d,u,p),_+=(s+2)*2,t+=s+1,o+=l}this._length_so_far.update()}}y(z,"__name__","MultiLineGL");export{z as MultiLineGL};
