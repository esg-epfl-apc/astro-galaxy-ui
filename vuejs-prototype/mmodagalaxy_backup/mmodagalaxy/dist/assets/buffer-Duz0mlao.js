var f=Object.defineProperty;var g=(s,e,t)=>e in s?f(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>g(s,typeof e!="symbol"?e+"":e,t);import{h as y,e as m,b as v}from"./index-DPsHDnTC.js";class p{constructor(e,t){r(this,"regl_wrapper");r(this,"glyph");r(this,"nvertices",0);r(this,"size_changed",!1);r(this,"data_changed",!1);r(this,"data_mapped",!1);r(this,"visuals_changed",!1);this.regl_wrapper=e,this.glyph=t}set_data_changed(){const{data_size:e}=this.glyph;e!=this.nvertices&&(this.nvertices=e,this.size_changed=!0),this.data_changed=!0}set_data_mapped(){this.data_mapped=!0}set_visuals_changed(){this.visuals_changed=!0}render(e,t,i){if(t.length==0)return;const{width:a,height:n}=this.glyph.renderer.plot_view.canvas_view.webgl.canvas,{pixel_ratio:_}=this.glyph.renderer.plot_view.canvas_view,l={pixel_ratio:_,width:a/_,height:n/_};this.draw(t,i,l)}}r(p,"__name__","BaseGLGlyph");function F(s,e,t,i,a){for(let n=0;n<t;n++){const _=s[n],l=e[n];isFinite(_+l)?(a[2*n]=_,a[2*n+1]=l):(a[2*n]=i,a[2*n+1]=i)}}const z={butt:0,round:1,square:2},b={miter:0,round:1,bevel:2},w={blank:0,dot:1,ring:2,horizontal_line:3,vertical_line:4,cross:5,horizontal_dash:6,vertical_dash:7,spiral:8,right_diagonal_line:9,left_diagonal_line:10,diagonal_cross:11,right_diagonal_dash:12,left_diagonal_dash:13,horizontal_wave:14,vertical_wave:15,criss_cross:16};function S(s){return w[y[s]??s]??0}function U(s){switch(s){case"dash":return 1;case"dot":return 2;case"diamond":case"diamond_cross":case"diamond_dot":return 3;case"hex":case"hex_tile":return 4;case"square_pin":return 5;case"inverted_triangle":case"ngon":case"triangle":case"triangle_dot":return 6;case"triangle_pin":return 7;case"star":case"star_dot":return 8;default:return 0}}class h{constructor(e,t=1){r(this,"regl_wrapper");r(this,"buffer");r(this,"array");r(this,"is_scalar");r(this,"elements_per_primitive");this.regl_wrapper=e,this.is_scalar=!0,this.elements_per_primitive=t}get_array(){return v(this.array!=null,"WrappedBuffer not yet initialised"),this.array}get_sized_array(e){return(this.array==null||this.array.length!=e)&&(this.array=this.new_array(e)),this.array}is_normalized(){return!1}get length(){return this.array!=null?this.array.length:0}set_from_array(e){const t=e.length,i=this.get_sized_array(t);for(let a=0;a<t;a++)i[a]=e[a];this.update()}set_from_prop(e){const t=e.is_Scalar()?1:e.length,i=this.get_sized_array(t);for(let a=0;a<t;a++)i[a]=e.get(a);this.update(e.is_Scalar())}set_from_scalar(e){this.get_sized_array(1).fill(e),this.update(!0)}to_attribute_config(e=0,t=1){return{buffer:this.buffer,divisor:this.is_scalar?t:1,normalized:this.is_normalized(),offset:e*this.bytes_per_element()}}to_attribute_config_nested(e=0,t=1){return{buffer:this.buffer,divisor:t*this.elements_per_primitive,normalized:this.is_normalized(),offset:this.is_scalar?0:e*this.bytes_per_element()*this.elements_per_primitive}}update(e=!1){this.buffer==null?this.buffer=this.regl_wrapper.buffer({usage:"dynamic",data:this.array}):this.buffer({data:this.array}),this.is_scalar=e}}r(h,"__name__","WrappedBuffer");class E extends h{bytes_per_element(){return Float32Array.BYTES_PER_ELEMENT}new_array(e){return new Float32Array(e)}}r(E,"__name__","Float32Buffer");class c extends h{bytes_per_element(){return Uint8Array.BYTES_PER_ELEMENT}new_array(e){return new Uint8Array(e)}set_from_color(e,t){const i=e.is_Scalar()&&t.is_Scalar(),a=i?1:e.length,n=this.get_sized_array(4*a);for(let _=0;_<a;_++){const[l,o,d,u]=m(e.get(_),t.get(_));n[4*_]=l,n[4*_+1]=o,n[4*_+2]=d,n[4*_+3]=u}this.update(i)}set_from_hatch_pattern(e){const t=e.is_Scalar()?1:e.length,i=this.get_sized_array(t);for(let a=0;a<t;a++)i[a]=S(e.get(a));this.update(e.is_Scalar())}set_from_line_cap(e){const t=e.is_Scalar()?1:e.length,i=this.get_sized_array(t);for(let a=0;a<t;a++)i[a]=z[e.get(a)];this.update(e.is_Scalar())}set_from_line_join(e){const t=e.is_Scalar()?1:e.length,i=this.get_sized_array(t);for(let a=0;a<t;a++)i[a]=b[e.get(a)];this.update(e.is_Scalar())}}r(c,"__name__","Uint8Buffer");class x extends c{is_normalized(){return!0}}r(x,"__name__","NormalizedUint8Buffer");export{p as B,E as F,x as N,c as U,F as i,U as m};
